/* You are in-charge of building in a flight media system. The Airline you work for recently received
 * feedback from passengers complaining that their plane lands before they get to see the ending of their
 * movie. As such, you are tasked with building a feature for choosing two movies whose combined runtime
 * will be exactly 30 min before the flight lands. You are given the flight duration(in minutes) and a
 * list of durations(in minutes) of N movies and you have to play the movies for the passengers of the
 * flight. Each movie is assigned a unique ID, numbered from 0 to N-1. The passengers begin watching
 * movies as soon as the flight takes off with each movie played back to back. Passengers watch exactly
 * two movies and no movie is played twice. If there are multiple combinations of movies, select the
 * combination with the longest movie
 *
 * Write an Algorithm to output a pair of movie IDs that finish exactly 30 minutes before the plane lands
 *
 * Assumptions:
 * 1. You will pick exactly two movies
 * 2. You cannot pick the same movie twice
 * 3. If you have multiple pairs with the same total time, select the pair with the longest movie
 * 4. There are at least two movies available.
 *
 * Input:
 * The input to the function/method consists of two arguments;
 * maxFlightDurations, an integer representing the duration of the flight;
 * durations, a list of Integers representing durations of the movies.
 *
 * Output:
 * Return a list of Integers representing the IDs of two movies whose combined runtime will finish
 * exactly 30 minutes before the flight lands.
 *
 * Example
 * Input
 * maxFlightDurations  = 90
 * durations = [1,10,25,35,60]
 *
 * Output
 * [2,3]
 *
 * */




******************Program Code*****************************************************************
import java.util.ArrayList;
import java.util.Collections;
public class MovieDuration {

	public static ArrayList<Integer> getSum(ArrayList<Integer> durations, int maxFlightDurations) {

		int l = 0;
		int r = durations.size()-1;
		ArrayList<Integer> backUpDurations = new ArrayList<>(durations);
		Collections.sort(durations);
		ArrayList<Integer> finalArr = new ArrayList<>();


		while(l < r)
		{
			if(durations.get(l) + durations.get(r) > maxFlightDurations-30)
			{
				r--;
			}
			else if (durations.get(l)+durations.get(r) < maxFlightDurations-30)
			{
				l++;
			}
			else
			{
				finalArr.add(durations.get(l));
				finalArr.add(durations.get(r));
				break;
			}

		}

		for (int i = 0; i < backUpDurations.size(); i++) {

			if(finalArr.get(0) == backUpDurations.get(i))
			{
				finalArr.remove(finalArr.get(0));
				finalArr.add(0,i);
			}
		}

		for (int i = 0; i < backUpDurations.size(); i++) {

			if(finalArr.get(1) == backUpDurations.get(i))
			{
				finalArr.remove(finalArr.get(1));
				finalArr.add(1,i);
			}
		}

		Collections.sort(finalArr);
		return finalArr;
	}

	public static void main(String[] args) {

		ArrayList <Integer> list = new ArrayList<>();
		int maxFlightduration = 90;
		list.add(1);
		list.add(10);
		list.add(25);
		list.add(35);
		list.add(60);
		System.out.println(getSum(list,maxFlightduration));

//Test Case 2
//		ArrayList <Integer> list = new ArrayList<>();
//		int maxFlightduration = 250;
//		list.add(100);
//		list.add(180);
//		list.add(40);
//		list.add(120);
//		list.add(10);
//		System.out.println(getSum(list,maxFlightduration));
	}
}

*********************Output**************************
Test Case 1:
[2, 3]

Test Case 2:
[1, 2]
